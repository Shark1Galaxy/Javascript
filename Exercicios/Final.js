// Fun√ß√£o para pedir 2 n√∫meros inteiros positivos
function solicitarNumeros() {
  let numeros = []; // Cria uma "caixa com gavetas" vazia para guardar os n√∫meros

  // Esse la√ßo repete 2 vezes (uma para cada n√∫mero que vamos pedir)
  for (let i = 0; i < 2; i++) {
    let num; // Aqui vamos guardar temporariamente o n√∫mero que o usu√°rio digitar

    // Esse "do...while" fica perguntando at√© a pessoa digitar um n√∫mero v√°lido
    do {
      // Pede o n√∫mero e converte o texto digitado para n√∫mero inteiro
      num = parseInt(prompt(`Digite o ${i + 1}¬∫ n√∫mero inteiro positivo:`), 10);

      // Se o n√∫mero for inv√°lido (n√£o √© n√∫mero ou √© menor/igual a zero), mostra aviso
      if (isNaN(num) || num <= 0) {
        console.log("‚ö†Ô∏è Por favor, digite apenas n√∫meros inteiros positivos!");
      }
    } while (isNaN(num) || num <= 0); // S√≥ sai daqui quando for um n√∫mero certo

    // Coloca o n√∫mero dentro do vetor (caixa)
    numeros.push(num);
  }

  // Devolve a caixa cheia de n√∫meros
  return numeros;
}

// Fun√ß√£o para fazer a divis√£o dos dois n√∫meros
function dividirNumeros(vetor) {
  // Pega o n√∫mero da primeira gaveta (posi√ß√£o 0) e divide pelo da segunda (posi√ß√£o 1)
  let resultado = vetor[0] / vetor[1];

  // Mostra o resultado no console
  console.log(
    `üìå Resultado da divis√£o: ${vetor[0]} √∑ ${vetor[1]} = ${resultado}`
  );
}

// üöÄ Programa principal (aqui √© onde tudo acontece de fato)

// Chama a fun√ß√£o para pedir os n√∫meros e guarda na vari√°vel 'vetorNumeros'
let vetorNumeros = solicitarNumeros();

// Chama a fun√ß√£o para dividir usando o vetor que a gente acabou de criar
dividirNumeros(vetorNumeros);
